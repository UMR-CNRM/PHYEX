steps = build

################################################################################################
# 1 - INCLUDE FILES
include = arch.fcm
include = config.fcm

################################################################################################
# 2 - CONFIGURATION FOR COMPILERS
# Set Fortran compiler/linker
build.prop{fc} = $FCOMPILER
# Set Fortran compiler options
build.prop{fc.flags} = $BASE_FFLAGS $COMPIL_FFLAGS
#build.prop{fc.include-paths} = /usr/include
build.prop{fc.defs} = $FPP_FLAGS WITHOUT_CXXDEMANGLE
# Set C compiler/linker
build.prop{cc} = $CCOMPILER
# Set C compiler options
build.prop{cc.flags} = $BASE_CFLAGS $COMPIL_CFLAGS
#build.prop{cc.include-paths} = /usr/include
build.prop{cc.defs} = $CPP_FLAGS WITHOUT_CXXDEMANGLE
# Set linker
build.prop{ld} = $LINK
# Set archive command
build.prop{ar} = $AR

################################################################################################
# 3 - TARGETS

#Target definition to build the testprogs programs and a shared lib
#We need a shared library (.so) but this cannot be build directly with fcm
#The FCM support team says: "FCM doesnâ€™t support building shared libraries."
#We use a dummy program to force fcm to use the linker and we add the needed flags
#to build a shared library instead of a program

#############################
# 3.1 All programs are built
build.target{task} = link
build.prop{fc.flags-ld} = $LD_FLAGS

#############################
# 3.2 Special options for specific progam

# 3.2.a Special treatment for the shared lib
#target is the dummy program but linking is hacked and result is renamed
build.target-rename = dummyprog.exe:libphyex.so
build.prop{fc.flags-ld}[libphyex.so] = $LD_FLAGS $LD_EXE_TO_SHARED
build.prop{dep.o.special}[dummyprog] = $ENTRYPOINTS

# 3.2.b Special treatment for the testprogs
build.prop{fc.defs}[testprogs] = $FPP_FLAGS $FPP_FLAGS_TESTPROGS

#############################
# 3.3 dependencies (internal and external)
$util = util1 util2 util3 util4 util5 util6 util7 util8 util9 util10 util11 util12 util13 util14 util15 util16
$mpi = mpi2 mpi3 mpi4 mpi5 mpi6 mpi7 mpi8 mpi9 mpi10 mpi11 mpi12 mpi13 mpi14 mpi15 mpi16 mpi17 mpi18 mpi19
$system = system1 system2 system3 system4 system5 system6 system7 system8 system10 system11 system12 system13 system14
build.prop{ns-dep.o} = param parkind drhook $util $mpi oml mpl gstats1 $system
build.prop{fc.libs} = $LIBS

################################################################################################
# 4 - SOURCES

#############################
# 4.1 Programs and dummy programm to force linking
build.source[dummyprog] = src/dummyprog.F90
build.source[testprogs] = $TESTPROGS_DIR

#############################
# 4.2 Main directory
build.source[param] = src/aux/ src/turb/ src/micro/ src/pyphyex.F90

#############################
# 4.3 Fiat directory
$FIAT = src/fiat/src
#It would be easier to put the entire fiat directory but there are issues
#with entry points declared twice: in C and in fortran; FCM does not like this
#The issue has been reported to the FCM support team but they have no solution.
#build.source[fiat] = $FIAT

# parkind and drhook must be compiled in order to be able to use them in PHYEX.

# In a first attempt, the mpl needed files were included one-by-one, then
# the one-by-one definition was replaced by a directory inclusion (beacause there was too much to include).
# In case it would be needed to go back to the one-by-one definition, the first needed files are the folowing ones:
#      $FIAT/fiat/mpl/internal/mpl_mpif.F90 $FIAT/fiat/mpl/internal/mpl_data_module.F90
#      $FIAT/fiat/mpl/internal/mpl_myrank_mod.F90 $FIAT/fiat/mpl/internal/mpi4to8.F90
#      $FIAT/fiat/mpl/internal/mpi4to8_m.F90 $FIAT/fiat/mpl/internal/mpi4to8_s.F90
#      $FIAT/fiat/mpl/internal/mpl_message_mod.F90 $FIAT/fiat/mpl/internal/mpl_abort_mod.F90
#      $FIAT/fiat/mpl/mpl_module.F90 $FIAT/fiat/mpl/internal/mpl_waitany_mod.F90
#      $FIAT/fiat/mpl/internal/mpl_write_mod.F90

# 4.3.a Modules and include files needed to compile source codes
build.source[parkind] = $FIAT/parkind
build.source[drhook] = $FIAT/fiat/drhook
build.source[include1] = $FIAT/fiat/include/fiat
build.source[util1] = $FIAT/fiat/util/ec_parkind.F90
build.source[util2] = $FIAT/fiat/util/ec_args_mod.F90
build.source[util3] = $FIAT/fiat/util/ec_lun.F90 
build.source[mpi1] = $FIAT/mpi_serial/mpif.h
build.source[oml] = $FIAT/fiat/oml/oml_mod.F90
build.source[gstats1] = $FIAT/fiat/gstats/yomgstats.F90

# 4.3.b Second order dependencies (sources needed for execution, and new module and include files)
build.source[util4] = $FIAT/fiat/util/abor1.F90
# After preprocessing, abor1 does not depend anymore on fckit_module
# I did not succeed to enable the preprocessing step and, at the same time,
# setting util4 to be used in the ns-dep.o property
build.prop{no-dep.f.module}[util4] = fckit_module
build.source[util5] = $FIAT/fiat/util/abor1_c.c
build.source[system1] = $FIAT/fiat/system/internal/tabort.c
build.source[mpi2] = $FIAT/mpi_serial/mpi_comm_rank.F
build.source[mpi3] = $FIAT/mpi_serial/mpi_comm_size.F
build.source[mpi4] = $FIAT/mpi_serial/mpi_send.F
build.source[mpi5] = $FIAT/mpi_serial/mpi_recv.F
build.source[mpi6] = $FIAT/mpi_serial/mpi_initialized.F
build.source[mpi7] = $FIAT/mpi_serial/mpi_error_string.F
build.source[mpi8] = $FIAT/mpi_serial/mpi_barrier.F
build.source[mpi9] = $FIAT/mpi_serial/mpi_abort.F
build.source[util6] = $FIAT/fiat/util/loc_addr.c
build.source[system2] = $FIAT/fiat/system/getstk.c
build.source[system3] = $FIAT/fiat/system/getrss.c
build.source[system4] = $FIAT/fiat/system/getpag.c
build.source[system5] = $FIAT/fiat/system/gethwm.c
build.source[system6] = $FIAT/fiat/system/getcurheap.c
build.source[system7] = $FIAT/fiat/system/getstackusage.c
build.source[system8] = $FIAT/fiat/system/getmaxrss.c
build.source[util7] = $FIAT/fiat/util/internal/ecomp_version.c
build.source[util8] = $FIAT/fiat/util/internal/ecmpi_version.c
build.source[util9] = $FIAT/fiat/util/internal/get_openmp.F90
build.source[util10] = $FIAT/fiat/util/ec_set_umask.c
build.source[util11] = $FIAT/fiat/util/ec_pmon.F90
build.source[util12] = $FIAT/fiat/util/ec_args.c
build.source[util13] = $FIAT/fiat/util/ec_flush.F90
build.source[system9] = $FIAT/fiat/system/getstatm.h
build.source[mpl] = $FIAT/fiat/mpl
build.source[util14] = $FIAT/fiat/util/ec_env_mod.F90
build.source[mpi10] = $FIAT/mpi_serial/mpi_comm_create.F
build.source[mpi11] = $FIAT/mpi_serial/mpi_init_thread.F
build.source[mpi12] = $FIAT/mpi_serial/mpi_buffer_detach.F
build.source[mpi13] = $FIAT/mpi_serial/mpi_comm_group.F
build.source[mpi14] = $FIAT/mpi_serial/mpi_finalized.F
build.source[mpi15] = $FIAT/mpi_serial/mpi_init.F
build.source[mpi16] = $FIAT/mpi_serial/mpi_group_incl.F
build.source[mpi17] = $FIAT/mpi_serial/mpi_finalize.F
build.source[mpi18] = $FIAT/mpi_serial/mpi_buffer_attach.F
build.source[mpi19] = $FIAT/mpi_serial/mpi_bcast.F
build.source[system10] = $FIAT/fiat/system/ec_get_cycles.c
build.source[util15] = $FIAT/fiat/util/ec_meminfo.F90
build.source[util16] = $FIAT/fiat/util/ec_env.c
build.source[system11] = $FIAT/fiat/system/internal/linuxtrbk.c
build.source[util17] = $FIAT/fiat/util/internal/raise.h
build.source[system12] = $FIAT/fiat/system/getstatm.c
build.source[system13] = $FIAT/fiat/system/internal/linux_bind.c
build.source[system14] = $FIAT/fiat/system/internal/gentrbk.F90
#ifcore module is external to fiat (intel)
build.prop{no-dep.f.module}[system14] = ifcore

# 4.3.c Other dependencies
build.source[nvtxdummy] = src/nvtx_dummy.F90
# After preprocessing, dr_hook_util does not depend anymore on nvtx
